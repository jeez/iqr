#ifndef _QEMBED_1804289383
#define _QEMBED_1804289383
#include <qimage.h>
#include <qdict.h>
static const QRgb zoom_data[] = {
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xde2e4e7,0x5597a2b9,0x936b7ea5,0xb2748bba,0xbc7790c3,0xac7289b7,0x857788ac,
    0x42a2abbc,0x4f0f0f1,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xde2e4e7,0x8666779a,0xf04766a6,0xfe5776b6,0xfe6f8ac1,
    0xfe7f98c8,0xfe839bc9,0xfe7b94c6,0xfe6683bd,0xfe5273b4,0xde436099,0x637c88a1,0x3c0c0c1,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0x31acb2bf,0xdb506ca6,
    0xfe5172b4,0xfe7c95c6,0xd1acbcdb,0xacd1daeb,0x9fdde4f0,0x99e6eaf4,0x9fdde3f0,0xaccfd8ea,0xd19fb2d5,0xfe6885bd,0xfe5172b3,0xbb465e8d,0x1785878c,0xffffff,
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,
    0xffffff,0x37aeb5c2,0xef4665a2,0xfe5474b4,0xdd8ba2cc,0x95d8e0ee,0xa4ffffff,0xb2ffffff,0xb2ffffff,0xb2ffffff,0xb2ffffff,0xb2ffffff,0xa4ffffff,0x95d2dbeb,
    0xdd7590c3,0xfe5274b3,0xd53e598e,0x1b55575c,0xefefef,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,
    0xffffff,0xffffff,0xffffff,0xffffff,0x17d5d7dd,0xe543609b,0xfe4f70b2,0xcb89a0cb,0x93eaeef6,0xb2ffffff,0xb2ffffff,0xb2ffffff,0xb2ffffff,0xb2ffffff,
    0xb2ffffff,0xb2ffffff,0xb2ffffff,0xb2ffffff,0x93e7ecf4,0xcb7a95c5,0xfe5374b4,0xc1364d7b,0xb808081,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xa25e729b,0xfe4e6fb1,0xd16281bb,0x91f6f8fb,0xa6ffffff,0xa6ffffff,
    0xa6ffffff,0xa6ffffff,0xa6ffffff,0xa6ffffff,0xa6ffffff,0xa6ffffff,0xa6ffffff,0xa6ffffff,0xa6ffffff,0x92f4f6fa,0xd16282ba,0xfe5173b2,0x7b1c273f,0x38f8f8f,
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0x27b9bec7,0xfb4a6aab,0xfb5072b3,
    0x7dcad4e8,0x92ffffff,0x92ffffff,0x92ffffff,0x92ffffff,0x92ffffff,0x92ffffff,0x92ffffff,0x92ffffff,0x92ffffff,0x92ffffff,0x92ffffff,0x92ffffff,0x92ffffff,
    0x7dcbd6e8,0xfb5678b5,0xe9435f96,0x1f010102,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,
    0xffffff,0x827585a5,0xfe4f70b3,0xb4738fc3,0x77ffffff,0x7affffff,0x7affffff,0x7affffff,0x7affffff,0x7affffff,0x7affffff,0x7affffff,0x7affffff,0x7affffff,
    0x7affffff,0x7affffff,0x7affffff,0x7affffff,0x77ffffff,0xb47a95c5,0xfe5374b4,0x71121a2a,0x39f9f9f,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xc54b6495,0xfe5375b6,0x75b5c4e0,0x58ffffff,0x58ffffff,0x58ffffff,0x58ffffff,0x58ffffff,0x58ffffff,
    0x58ffffff,0x58ffffff,0x58ffffff,0x58ffffff,0x58ffffff,0x58ffffff,0x58ffffff,0x58ffffff,0x58ffffff,0x75b9c9e1,0xfe597cb9,0xb2293959,0x114f4f4f,0xffffff,
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xec4a68a4,0xfe5778ba,0x38d6dfee,0x30ffffff,0x30ffffff,
    0x30ffffff,0x30ffffff,0x30ffffff,0x30ffffff,0x30ffffff,0x30ffffff,0x30ffffff,0x30ffffff,0x30ffffff,0x30ffffff,0x30ffffff,0x30ffffff,0x30ffffff,0x39d8e1ef,
    0xfe5f82be,0xd2384e78,0x260f0f0f,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xfc5173b3,
    0xfe5a7dbe,0x14d7e0ef,0x16ffffff,0x16ffffff,0x16ffffff,0x16ffffff,0x16ffffff,0x16ffffff,0x16ffffff,0x16ffffff,0x16ffffff,0x16ffffff,0x16ffffff,0x16ffffff,
    0x16ffffff,0x16ffffff,0x16ffffff,0x14d9e3f0,0xfe6488c3,0xdc415987,0x37000000,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,
    0xffffff,0xffffff,0xffffff,0xf25171af,0xfe5e81c2,0x11d8e1f0,0x9ffffff,0x9ffffff,0x9ffffff,0x9ffffff,0x9ffffff,0x9ffffff,0x9ffffff,0x9ffffff,
    0x9ffffff,0x9ffffff,0x9ffffff,0x9ffffff,0x9ffffff,0x9ffffff,0x9ffffff,0x12dbe4f1,0xfe698dc6,0xd83f5781,0x3d000000,0xffffff,0xffffff,0xffffff,
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xd348649a,0xfe6186c7,0x33cfdbee,0x3ffffff,0x3ffffff,0x3ffffff,0x3ffffff,
    0x3ffffff,0x3ffffff,0x3ffffff,0x3ffffff,0x3ffffff,0x3ffffff,0x3ffffff,0x3ffffff,0x3ffffff,0x3ffffff,0x3ffffff,0x33d3dff0,0xfe6c91cb,0xc7364a6c,
    0x3a000000,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0x967487ad,0xfe6387c9,0x77a2b9e0,
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,
    0xffffff,0x77acc3e4,0xfe6e92cd,0xa71f2a3d,0x2b0f0f0f,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,
    0xffffff,0x40949cac,0xfe6388ca,0xdc769ad4,0x4f6f8fc,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,
    0xffffff,0xffffff,0xffffff,0xffffff,0x4f7f9fc,0xdc85a9db,0xf76689c0,0x7a040609,0x163f3f3f,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0x2afafb0,0xc94b6799,0xfe6d93d3,0x76a0bce5,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0x76aec9eb,0xfe7ea5dc,0xc2394c6b,0x59000000,0x47f7f7f,0xffffff,
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0x3b313844,0xf9678ccb,0xf9759dda,0x48ceddf3,
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0x48d6e5f6,0xf989b2e5,0xed698bbc,
    0x7e05070a,0x281f1f1f,0xefefef,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,
    0x1bfbfbf,0x7827364e,0xfd6e96d6,0xf97ba4df,0x69b2ccee,0xf7fafd,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xf8fbfd,
    0x69bed8f4,0xf990b9eb,0xf67da3d6,0x96171e29,0x51000101,0x32424954,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0x66f6f6f,0x85293850,0xfa7097d4,0xfe7ea7e1,0xc196bae9,0x4ecde0f5,0x7f1f6fc,0xffffff,0xffffff,
    0xffffff,0x7f2f7fd,0x4dd3e5f7,0xc1a5c9f0,0xfe91baec,0xf17ba0d0,0x991b232f,0x69050609,0xb14c668f,0xf36d95d6,0x473a4454,0xdfdfdf,0xffffff,0xffffff,
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xefefef,0x95f5f5f,0x62141b27,0xdd5978a7,0xfe7ca5de,
    0xfe84aee2,0xf68bb5e5,0xd191bae7,0xbfaccbed,0xd195bee9,0xf694bee9,0xfe90bae7,0xfc89b2e2,0xd0556f91,0x880b0e13,0x68070a0e,0xd06381af,0xfea2c1ec,0xfe83abe6,
    0xec6a8fcb,0x313e444d,0xcfcfcf,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,
    0xffffff,0x55f5f5f,0x2f000001,0x851b2534,0xc6465d7f,0xe86688b5,0xf87aa1d2,0xfd81aadb,0xf579a0ce,0xe26585ac,0xbf425771,0x90121821,0x6e000000,0x46030405,
    0xc55a79a6,0xfe7faae4,0xfe9abdea,0xfea2c2ec,0xfe7eaae4,0xdb6285ba,0x1e585c61,0xefefef,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0x1afafaf,0xc3f3f3f,0x2d000000,0x50000000,0x64000000,0x6e000000,0x6e000000,0x68000000,
    0x57000000,0x37000000,0x132f2f2f,0x78455875,0xfe7aa5de,0xfe7fabe1,0xfe83afe4,0xfe94bae8,0xfe8db5e7,0xfe81ade4,0xca5a7aa9,0x12434547,0xefefef,0xffffff,
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xdfdfdf,0x2bfbfbf,
    0x87f7f7f,0xd7f7f7f,0xe7f7f7f,0xa7f7f7f,0x47f7f7f,0xbfbfbf,0xffffff,0xe939598,0xcf5a79a8,0xfe7da6dd,0xfe82ace1,0xfe86afe3,0xfe8ab2e5,0xfe87b1e5,
    0xfe82abe3,0xaa4a648a,0x6808081,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xdfdfdf,0x2e1b1e25,0xe5678abc,
    0xfe80a7de,0xfe86ade2,0xfe89afe3,0xfe8ab0e4,0xfe89afe3,0xfe84aae2,0x85384a67,0x29f9f9f,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,
    0xffffff,0xffffff,0x19f9f9f,0x44121924,0xf17194c9,0xfe83a8de,0xfe88aee2,0xfe8ab0e3,0xfe8bb1e4,0xfe8ab0e4,0xfc82a6de,0x6539475c,0xcfcfcf,0xffffff,
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0x28f8f8f,0x5b2d3747,0xf9799cd4,0xfe85a9df,0xfe8aaee2,0xfe8cafe3,0xfe8cb0e4,
    0xfe8baee3,0xf77da1d8,0x493b4553,0xcfcfcf,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0x36f6f6f,0x7d2e3d55,
    0xfd7da0d9,0xfe86a9e0,0xfe8aafe2,0xfe8bafe3,0xfe8bafe3,0xfe87abe2,0xea7193c8,0x3020262e,0xefefef,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,
    0xffffff,0xffffff,0xffffff,0x85f6060,0x9e3f5473,0xfe7fa3dc,0xfe86aae0,0xfe8aade2,0xfe8aaee2,0xfe88ace2,0xfe80a4de,0xda6483b4,0x1845474a,0xefefef,
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xefefef,0x10414243,0xbc4f6890,0xfe7fa3db,0xfe85a8df,0xfe86a9e0,0xfe84a8df,
    0xfe7ca0d9,0xb9364764,0x48000101,0x38f8f8f,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xefefef,0x1b343639,
    0xcf5975a1,0xfe7ca0d9,0xfe7fa2da,0xfe7ca0d8,0xb7344560,0x6f000000,0x28000000,0x1bfbfbf,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,
    0xffffff,0xffffff,0xffffff,0xdfdfdf,0x2b292d32,0xe36281b4,0xfc7396d0,0xb9344561,0x73000001,0x26000000,0x19f9f9f,0xffffff,0xffffff,0xffffff,
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,
    0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0x1cfcfcf,0x43232934,0x9d232f42,0x6c000000,0x29000000,0x18f8f8f,
    0xffffff,0xffffff
};

/* Generated by qembed */
static struct EmbedImage {
    int width, height, depth;
    const unsigned char *data;
    int numColors;
    const QRgb *colorTable;
    bool alpha;
    const char *name;
} embed_image_vec[] = {
    { 32, 32, 32, (const unsigned char*)zoom_data, 0, 0, TRUE, "zoom" },
    { 0, 0, 0, 0, 0, 0, 0, 0 }
};

static const QImage& qembed_findImage( const QString& name )
{
    static QDict<QImage> dict;
    QImage* img = dict.find( name );
    if ( !img ) {
	for ( int i = 0; embed_image_vec[i].data; i++ ) {
	    if ( strcmp(embed_image_vec[i].name, name.latin1()) == 0 ) {
		img = new QImage((uchar*)embed_image_vec[i].data,
			    embed_image_vec[i].width,
			    embed_image_vec[i].height,
			    embed_image_vec[i].depth,
			    (QRgb*)embed_image_vec[i].colorTable,
			    embed_image_vec[i].numColors,
			    QImage::BigEndian );
		if ( embed_image_vec[i].alpha )
		    img->setAlphaBuffer( TRUE );
		dict.insert( name, img );
		break;
	    }
	}
	if ( !img ) {
	    static QImage dummy;
	    return dummy;
	}
    }
    return *img;
}

#endif
