%!PS-Adobe-2.0
%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software
%%Title: Prc_Simulation_xpl_2_doc.dvi
%%CreationDate: Wed Dec 13 01:55:41 2000
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips Prc_Simulation_xpl_2_doc.dvi -o
%+ Prc_Simulation_xpl_2_doc.ps
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2000.12.13:0154
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks 97 - Version 97, 93/05/07.
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    (P) 0 get /BoldPentagon put
  /Metrics 13 dict def
  Metrics begin
    /Bullet 1000 def
    /Circle 1000 def
    /BoldCircle 1000 def
    /SolidTriangle 1344 def
    /Triangle 1344 def
    /BoldTriangle 1344 def
    /SolidSquare 886 def
    /Square 886 def
    /BoldSquare 886 def
    /SolidPentagon 1093.2 def
    /Pentagon 1093.2 def
    /BoldPentagon 1093.2 def
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle { -550 -550 550 550 } def
    /BoldCircle /Circle load def
    /Bullet /Circle load def
    /Triangle { -571.5 -330 571.5 660 } def
    /BoldTriangle /Triangle load def
    /SolidTriangle /Triangle load def
    /Square { -450 -450 450 450 } def
    /BoldSquare /Square load def
    /SolidSquare /Square load def
    /Pentagon { -546.6 -465 546.6 574.7 } def
    /BoldPentagon /Pentagon load def
    /SolidPentagon /Pentagon load def
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath { 0 0 500 0 360 arc closepath } def
    /Bullet { 500 500 Adjust CirclePath fill } def
    /Circle { 500 500 Adjust CirclePath .9 .9 scale CirclePath eofill } def
    /BoldCircle { 500 500 Adjust CirclePath .8 .8 scale CirclePath eofill } def
    /BoldCircle { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath {
      0  660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath
    } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath {
      -450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
      closepath
    } def
    /SolidSquare { SquarePath fill } def
    /Square { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon { PentagonPath .78 .78 scale PentagonPath eofill } def
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
% END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 39158280 55380996 1000 600 600
(Prc_Simulation_xpl_2_doc.dvi) @start
%DVIPSBitmapFont: Fa cmsy10 10.95 1
/Fa 1 16 df<EB0FFCEB3FFF90B512C0000314F04880488048804880A2481580A3B712C0
AA6C1580A36C1500A26C5C6C5C6C5C6C5CC614C0013F90C7FCEB0FFC22227BA72D>15
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmr10 10.95 5
/Fb 5 62 df<EB01FE90380FFFC090383F03F090387C00F849137C48487F48487F4848EB
0F80A2000F15C04848EB07E0A3003F15F0A290C712034815F8A64815FCB3A26C15F8A56C
6CEB07F0A3001F15E0A36C6CEB0FC0A26C6CEB1F80000315006C6C133E6C6C5B017C5B90
383F03F090380FFFC0D901FEC7FC263F7DBC2D>48 D<EB01C013031307131F137FEA07FF
B5FC139FEAF81F1200B3B3ACEB7FF0B612F8A31D3D78BC2D>I<EB07FC90383FFF8090B5
12E03903F01FF83907C007FC390F0001FE001E6D7E001C1580003CEC7FC05AED3FE01270
B4FC6DEB1FF07FA56C5A6CC7FC120CC813E0153FA216C0157F168015FF16004A5A5D4A5A
4A5A5D4A5A4A5A4AC7FC147E147C5C495A495A495A495A49C71270133E133C5B4914E048
5A485A485A48C7120148B6FCA25A4815C0B7FCA3243D7CBC2D>I<00061403D80780131F
01F813FE90B5FC5D5D5D15C092C7FC14FCEB3FE090C9FCACEB01FE90380FFF8090383E03
E090387001F8496C7E49137E497F90C713800006141FC813C0A216E0150FA316F0A3120C
127F7F12FFA416E090C7121F12FC007015C012780038EC3F80123C6CEC7F00001F14FE6C
6C485A6C6C485A3903F80FE0C6B55A013F90C7FCEB07F8243F7CBC2D>53
D<007FB912E0BA12F0A26C18E0CDFCAE007FB912E0BA12F0A26C18E03C167BA147>61
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmmi10 10.95 7
/Fc 7 120 df<EE07F0ED03FF17E0A2ED000FA217C0A2161FA21780A2163FA21700A25E
A2167EA216FEA25EEC1F80ECFFE1903803F07190390FC039F890381F801D90383F000F13
7E495C00011407485A485A5E485A001F140FA248485CA2151F127F495CA2153F12FF90C7
90C7FCA25DEE038048147EA215FE1607007ED901FC130014035E6C0107130E140E3A1F80
1C7C1C000F13783A07C1F03E383A01FFC01FF03A007F0007C02C407DBE2F>100
D<EC1FE0ECFFFC903803F01E90380FC00F90393F800780D97E0013C0491303EA03F81207
49130748481480121F49130F003FEC1F00153E397F8001FCEC1FF0B6128002F8C7FC90C9
FCA45AA616C01501007E1403ED07806CEC0F00151E6C5C6C6C13F83907C003E03903E03F
802600FFFEC7FCEB3FE022297CA72A>I<EC01F8EC0FFE91383F07879139FC03DF809038
01F801903903F000FFEB0FE04948EB7F005C133F49C7FC49147E5B000115FEA248485CA2
15011207495CA21503120F495CA21507A25E5B0007140FA24B5A6D133F0003147F000114
FF6D485B0000EB03DF90387E0F3FEB1FFCD907F090C7FC90C7FC5DA2157EA215FEA25D00
1C1301007F5C4813035D4A5A4A5A48495A00F8017EC8FC387E01FC381FFFE0000390C9FC
293B7FA72B>103 D<EB01FC13FF5CA21303A25CA21307A25CA2130FA25CA2131FA25CA2
133FA291C9FC15FE90397F07FFC091381F03E090397E3801F09138F000F8EBFFE04A7F5C
91C7FC485AA25BA2484813015E5BA2000714035E5B1507120F5E49130F5E121F031F1370
491480A2003F023F13F0EE00E090C7FC160148023E13C01603007E1680EE070000FE5DED
1F1E48EC0FF80038EC03E02C407CBE34>I<143C14FEA21301A314FCEB00701400AD137E
3801FF803803C7C0EA0703000F13E0120E121C13071238A2EA780F007013C0A2EAF01F14
801200133F14005B137EA213FE5BA212015B0003130E13F0A20007131EEBE01CA2143CEB
C0381478147014E013C13803E3C03801FF00EA007C173E7EBC1F>I<147014FC1301A25C
A21303A25CA21307A25CA2130FA25CA2007FB512F0B6FC15E039001F8000133FA291C7FC
A25BA2137EA213FEA25BA21201A25BA21203A25BA21207EC01C013E01403000F1480A2EB
C0071500140E141E5C000713385C3803E1E03801FF80D8003EC7FC1C3A7EB821>116
D<017CEE038048B40207EB0FE02603C7C090391F801FF0EA0703000F7F000E153F001C16
000107160F003817074C1303D8780F027E130100705B1800D8F01F14FE4A4914E0120013
3FDA000114014C14C05B137E0303140301FE4A14805BA2F0070000011407494A5B180EA2
60A2030F5C12006D011F5C017C496C5B017E0139495A6D903870F80390281F81E07C0FC7
FC903A07FFC01FFE010090380007F03C297EA741>119 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd ecrm1095 10.95 38
/Fd 38 123 df<DA03FFEB0FE0021F9038C07FF8913AFE00F1F81CD901F890383BE07ED9
07E090387FC0FF90390FC001FFD91F805CD93F005C5B017E167E01FE6D48130049147EAE
B91280A3D800FCC7007EC7FCB3AE486C14FF277FFFF83F13FFA338407FBF35>27
D<EC03FE91381FFFC09138FE01E0903901F80078D907E0131C4948137C494813FE90383F
00015B137E13FE496D5A167893C7FCAB167EB712FEA33900FC00011500167EB3AC486C14
FF277FFFF83F13FCA32E407FBF32>I<1430147014E0EB01C0EB0380EB07005B131E5BA2
5B5BA2485AA2485AA212075B120FA290C7FC5AA2121E123EA3123C127CA6127812F8B212
78127CA6123C123EA3121E121FA27E7FA212077F1203A26C7EA26C7EA213787FA27F7F7F
EB0380EB01C0EB00E014701430145A77C323>40 D<12C07E12707E7E7E120F6C7E6C7EA2
6C7E6C7EA21378A27FA2133E131E131FA27F1480A2130714C0A3130314E0A6130114F0B2
14E01303A614C01307A31480130FA214005BA2131E133E133CA25BA25BA2485A485AA248
5A48C7FC120E5A5A5A5A5A145A7BC323>I<121C127FEAFF80A213C0A3127F121C1200A5
12011380A2120313005A1206120E120C121C5A5A12600A1B788819>44
D<121C127FEAFF80A5EA7F00121C0909788819>46 D<EB03FC90381FFF8090383E07C090
38F801F048486C7E4848137C49133C0007143E48487FA248C7EA0F80A24815C0A4007EEC
07E0A500FE15F0B3A3007E15E0A4007F140F6C15C0A46C15806D131F000F1500A26C6C13
3EA26C6C5B6C6C5B6C6C485A90383E07C06DB45AD903FCC7FC243F7CBC2D>48
D<14C013031307131F137FEA07FFB5FC139FEAF81F1200B3B3ACEB7FF0B612F8A31D3D78
BC2D>I<EB07FC90383FFF8090B512E03901F00FF839078003FC48486C7E000E6D7E48EC
7F8048EC3FC012300070EC1FE01260A200FEEC0FF07E7FA56CC7FC121CC813E0151FA216
C0153F1680157F160015FE4A5AA24A5A4A5A4A5A5D4A5A023EC7FC5C5C495A495A5C495A
49C71230131E5B5B491460485A485A485A90C812E048B6FC5A5A4815C0B7FCA3243D7CBC
2D>I<EB07FC90383FFF8090B512E03901F807F83907C003FC48C66C7E000E6D7E48EC7F
80EA1F80486CEB3FC07FA56C5A0007C7FCC81380157FA216005D5D4A5A4A5A5DEC0FC002
3FC7FCEB1FFCECFF809038000FE0EC03F86E7E6E7E157F1680ED3FC0A216E0A2151F16F0
A2120C123F487E487EA4ED3FE05B6CC713C01270ED7F807E6CECFF00000F495A3907C003
FC3903F80FF0C6B55A013F1380D907FCC7FC243F7CBC2D>I<150EA2151E153EA2157E15
FEA214011403A21406140E140C141814381430146014E014C0EB0180130314001306130E
130C5B133813305B13E05B485A120390C7FC1206120E120C5A123812305A12E0B8FCA3C8
EAFE00AC4A7E49B6FCA3283E7EBD2D>I<00061403D807C0130F01F813FE90B55AA215F0
5D5D92C7FC38063FF890C9FCADEB01FE90380FFF8090383E03E090387001F8496C7ED807
C0137E497F90C713800006141FC813C0A216E0150FA316F0A4123E127F487EA490C713E0
48141F12E0006015C012700030EC3F8012386CEC7F00001E14FE6C495A3907C003F83903
F00FE0C6B55A013F90C7FCEB07F8243F7CBC2D>I<EC1FE0ECFFF8010313FE90380FF01F
90391F80078090383F0003017EEB0FC049131F4848133F485AA2485A000FEC1F8049EB0F
00001F91C7FCA25B123FA3127F90C9FCEB01FE903807FF8039FF0E03E0496C7E90383800
FC49137E0160133E01E0133F49EB1F8016C05B16E0150FA290C713F0A67EA56C7E16E0A2
121FED1FC07F000F1580153F6C6C14006C6C137E6C6C5B6C6C485A90387E07F06DB45A01
0F1380D903FCC7FC243F7CBC2D>I<121C127FEAFF80A5EA7F00121CC7FCB3A3121C127F
EAFF80A5EA7F00121C092778A619>58 D<DB3FF0130C912603FFFE131C021FEBFF80913A
7FE00FC03C913AFF0001F07CD903FCEB0078D907F0EC3CFCD91FE0140F49481407494814
0349C8FC4848150149150012034848167CA24848163CA24848161CA2123F5B180C127FA3
4993C7FC12FFAB041FB512F0127F7F9339000FFE00EF03FC123FA27F121FA26C7EA26C7E
A26C7E6C7EA26C7E6D6C14076D7E6D6C140FD907F8141C6D6CEC387CD900FFECF03C913A
7FF007E01C021FB5EA800C020349C8FC9138003FF03C427BBF47>71
D<003FB9FCA3D9E000EBC00190C7397F80003F007EEF1F80007C170F0078170700701703
A300601701A548EF00C0A5C81600B3B24B7E4A7F0107B612F8A33A3E7DBD41>84
D<EB1FF0EBFFFC3803E03F390F000FC0001C6D7E001F6D7E486C6C7E6D6C7EA3157E6C5A
6CC7FCC8FCA4EC1FFEEB03FF90381FF87EEB7F803801FC00EA07F0485A485A485A127F90
C7FC160312FEA315FEA21401007F14BE14033A3F80071F06261FC00E138E3A0FF03C0FFC
3A03FFF007F83A003FC003E0282A7CA82D>97 D<EA01F812FFA3120712031201B1EC07F8
EC1FFF9138780FC09039F9E003F09039FB8001F801FFC77E49147E4980EE1F805B17C016
0F17E0A2160717F0AA17E0160FA317C0161F17806DEC3F007F01F6147E01F75C9039E380
01F89039C1C003E09039C0F81F809026803FFEC7FCC7EA07F02C407EBE32>I<49B4FC01
0F13E090383F00F8017C131E484813074848131F4848EB3F804848137FA2485AA248C7EA
3F00151E4891C7FCA2127E12FEAB127FA36C15C07F001F14016D1480000F14036C6CEB07
006C6C13066C6C131E6C6C133890383F01F090380FFFC0D901FEC7FC222A7DA828>I<ED
01F815FFA3150715031501B114FF010713C190381F80F190387C00394848131D4848130F
4848130748481303A248481301123F90C7FC5AA3127E12FEAA127E127FA27E7F001F1403
A26C6C13076C6C130F6C6CEB0DFC6C6CEB3DFE6C6C903871FFF090383F01E190380FFF81
903A01FE01F8002C407DBE32>I<EB03FC90381FFF8090387E07E09038F801F048486C7E
4848137C48487F000F143F48487F168048C7FC150F5A16C0127EA212FEA2B7FCA248C9FC
A6127E127FA36C15C07F001F14016C6C148015036C6CEB07006C6C130E6C6C5B6C6C5B90
383F01F090380FFFC0D901FEC7FC222A7DA828>I<EC1FC0ECFFF0903803F038903807C0
FC90380F81FE131FEB3F01133E137EEC00FC491300AFB6FCA3D800FCC7FCB3AE487E387F
FFFEA31F407FBF1C>I<167E903903FC01FF903A0FFF07878090393E07CE0F9038FC03FC
3901F801F83B03F000FC070049017CC7FC0007147EA248487FA86C6C137EA20003147C6D
13FC6C6C485A6D485A9038BE07C026038FFFC8FCEB03FC48CAFCA47FA27F6C7E90B512F0
6C14FE6F7E6C6C14E048B612F83907C0001FD81F80EB03FC48C87E003E157E48153E163F
4881A56C5D007C153E007E157E6C5D6C6C495A6C6C495AD803F0EB0FC0D800FE017FC7FC
90383FFFFC010313C0293D7EA82D>I<EA01F812FFA3120712031201B1EC03FC91380FFF
8091383C0FC09138F003E0D9F9C07F9039FB8001F8140001FF6D7E5BA25BA25BB3A6486C
497EB539F07FFFF8A32D3F7EBE32>I<EA01C0EA07F0487EA56C5AEA01C0C8FCACEA01F8
127FA3120712031201B3AC487EB512E0A3133D7EBC19>I<EA01F812FFA3120712031201
B3B3B1487EB512F0A3143F7EBE19>108 D<2701F803FCEB01FE00FF903B0FFF8007FFC0
913B3C0FC01E07E0913BF003E07801F02607F9C0D9F0E07F3D03FB8001F9C000FC000101
005C01FFD900FF147E4992C7FCA2495CA2495CB3A6486C496C14FFB528F07FFFF83F13FC
A346287EA74B>I<3901F803FC00FF90380FFF8091383C0FC09138F003E02607F9C07F3A
03FB8001F80001130001FF6D7E5BA25BA25BB3A6486C497EB539F07FFFF8A32D287EA732
>I<EB01FE90380FFFC090383F03F090387C00F8D801F0133E48487F4848EB0F80A24848
EB07C0001F15E090C712034815F0A2007EEC01F8A400FE15FCA9007E15F8A3007F14036C
15F0A26C6CEB07E0000F15C06D130F000715806C6CEB1F006C6C133ED800FC13FC90383F
03F090380FFFC0D901FEC7FC262A7DA82D>I<3901F807F800FFEB1FFF9138780FC09039
F9E003F03A03FB8001F86CB4C77E49147E49147FEE3F8049141F17C0A2EE0FE0A317F016
07A9EE0FE0A4EE1FC0A2EE3F806D15006D5C16FE6D495A9039FB8003F89039F9C007E090
39F8F81F80DA3FFEC7FCEC07F091C9FCAD487EB512F0A32C3A7EA732>I<3903F00FC000
FFEB3FF0ECF0F89038F1C3FC00071383EA03F33801F70313F6EC01F89038FE0060491300
A45BB3A4487EB512F8A31E287EA723>114 D<90387FC0603903FFF8E03807C03D381E00
0F481303481301A20070130012F01560A27EA27EB41400EA7FC013FE383FFFE06C13FC00
077F6CEBFF80C66C13C0010713E0EB003FEC0FF000C01303EC01F814007E1578A27EA27E
15F07EEC01E06C14C039F780078039F1E01F0038E0FFFC38C01FE01D2A7DA824>I<1318
A61338A41378A213F8A2120112031207001FB512C0B6FCA2D801F8C7FCB3A21560A96C6C
13E015C0A2EB7E0190383F038090381F8700EB07FEEB01F81B397EB723>I<D801F814FC
00FF147FA3000714030003140100011400B3A51501A3150312006D1307ED0EFE017C497E
6D4913F890381F80F0903807FFE00100903800FC002D297EA732>I<B539C007FFE0A327
07FC000113006C48EB007C1678000115707F00001560A2017E5CA2017F13016D5CA26D6C
48C7FCA26E5A010F1306A26D6C5AA2ECF01C01031318A26D6C5AA2ECFC7001001360A2EC
7EC0A2147F6E5AA26EC8FCA3140EA22B287EA630>I<B53B87FFFC03FFF0A33D0FFC003F
E0007FC0D807F06D48EB3F0000036E48131E70131C6C7E03071418826C6C010F5CA26D6E
1370017E01191460A2017F6E13E06D01305CA20280EBFC01011FD9607C5BA290280FC0E0
7E03C7FCEDC03EA2D907E1EB3F06ED801F1786D903F3148CED000F17CCD901FEEB07D8A2
17F86D486D5AA302786D5AA302306D5A3C287EA641>I<B539C007FFE0A32707FC000113
006C48EB007C0001157816707F000015607F017E5CA26D495AA2EC8003011F91C7FCA290
380FC006A2ECE00E0107130CA26D6C5AA2ECF8380101133014FC01005BA2EC7EC0A2147F
6E5AA26EC8FCA3140EA2140CA2141C1418A25CA25C1238007C13E000FE5B13015C49C9FC
EA7C07EA700EEA383CEA1FF8EA07E02B3A7EA630>121 D<001FB61280A29038E0007F90
C71300001E14FE001C495A140300185C0038495A4A5A0030131F5D4A5A4AC7FCA2C712FE
495A13035C495A495A131F9138C00180EB3F80EB7F00A213FE485A000314035B48481400
485A001F5C495B485A48C7123F4849B4FC90B6FCA221277EA628>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe ecbx1095 10.95 32
/Fe 32 122 df<ED7FF891380FFFFE027F6D7E903A01FFC01FC0903A07FE0003E0D91FFC
497ED93FF0EB1FF84948133FA2495A4C7E48496D5AA3705A705AEE038093C8FCA6923803
FFFCB8FCA40001903880000FB3AE007FD9FE03B512F0A434407EBF3A>28
D<391F8003F0397FC007FCEBE00F00FF14FEA4007F14FCA4EBC007A2003F14F8A5EB8003
A2001F14F0A4EB0001A26C14E0A5000E13001F2076BF34>34 D<922607FF80131C92B500
F8133C020702FE137C023F9138FF80FC91B538003FE1010301F0EB07F74901C0EB01FF01
1F90C8FCD93FFC153F4948151F495A4849150F481707484915035C48170191C9FC481700
A2485AA2197C127FA2491700A212FFAC127FA27F193C123FA36C7E197C6C1878806C18F8
6E16F06C6D15016CEF03E06C6DED07C06D6C150FD93FFEED1F806D6CED3F00010701C014
FE6D01F0EB03F8010001FFEB1FF0023F90B512C0020792C7FC020014F8030713803E407A
BE4B>67 D<B812F8EFFF8018F018FC26003FFEC76CB4FC050F13C005037F05007FF03FF8
727E727E85721380841AC0A27213E0A21AF084A21AF8A41AFCAD1AF8A41AF0A2601AE0A2
4E13C0A24E13801A00604E5A4E5AF0FFF84D13E0050F5B057F5BB948C7FC18F818C005F8
C8FC463E7DBD50>I<B912F8A426007FFCC713FC171F170717011700A2187C187E183EA2
181EA4041E131F180FA31800A2163EA2167E16FE150391B5FCA4ECFC031500167E163EA2
161EA693C8FCAEB712C0A4383E7CBD41>70 D<922607FFC0130E92B500F8131E020702FF
133E023FEDC07E91B539801FE0FE499039F80003FB010701C0EB00FF011F90C8127F4948
153F4948151FD9FFF0150F481707484915034A1501485B48170091CAFC48187EA2485AA2
193E127FA24994C7FCA212FFAB0407B612FC127FA27F93C7383FFE00123FA36C7EA26C7F
A26C7F7E806C7F6C7F6D6C157F6D7E6D6C15FF010701C05B010101F85B6D9039FF801FF1
023F90B5EAC07E0207ED001E020002FC1306030701C090C7FC46407ABE52>I<B600FE01
7FB6FCA426007FFCC8383FFE00B3A691B8FCA402FCC8123FB3A8B600FE017FB6FCA4483E
7CBD51>I<B71280A426003FFEC7FCB3B3B2B71280A4213E7DBD27>I<B712C0A426007FFC
C9FCB3AF1878A418F0A41701A31703A2EF07E0A2170F171F173F17FF1603161FB912C0A4
353E7CBD3E>76 D<B812C017FCEFFF8018F028003FFE000113FC9338003FFE717E05077F
85717FA2717FA285A761A24D5BA24D5B61DD1FFEC8FC4D5A933803FFF091B712C04DC9FC
A2913AFE000FFF80040313E004007F717E84173F84171F84A685A5F20180F203C019C083
A2719038E00780A2B76C6C9038F00F0071EBFC3F9439007FFFFE061F13F8CC13E04A3F7D
BD4E>82 D<903A01FF8001C0011FEBF803017FEBFE0748B6128F489038007FDFD807F8EB
0FFF4848130348487F4848EB007F163F127F49141F160F12FF1607A27FA26D1403A27F01
FC91C7FC13FF6C13F8ECFF8015FC6CECFF806C15E016F86C816C816C816C16806C6C15C0
131F010715E0EB007F020314F0EC001F1503030013F8167F163F12F0161FA2160FA27EA2
17F07E7EEE1FE07E6DEC3FC013E06DEC7F8001FE903801FF003AFEFFE007FED8FC3FB512
F8D8F80F5CD8F003148027E0001FFCC7FC2D407ABE3A>I<003FB912F8A4903BFC007FFC
007F01E0160FD87F80EE03FC90C71501007E1700A2007C187CA20078183CA548181EA5C8
1600B3B1011FB712F0A43F3D7CBC48>I<B76C90B61280A426003FFEC96CC7FC193EB3B3
A5011F5FA2806D17FC616D6D1401616D6D4A5A6D16076D6DEC1FC0DA7FF84A5ADA3FFE49
B4C8FC913A0FFFC00FFC020390B55A020015E0031F1480030101F8C9FC493F7DBD50>I<
903807FF80013F13F048B512FC3903FC03FF2607E00013C0D80FF86D7E001F6E7E7F6F7E
A26F7EA26C5A6C5AEA01C0C8FCA3EC03FF49B5FC130F017F138F3901FFF00F0007138048
1300EA1FFC485A127F5B12FF5BA3151FA26D133F127F6D49B4FC273FFC01F713FC391FFE
07E30007B5128100019038FE007F26001FF890C7FC2E2B7DA932>97
D<EC7FF00103B5FC011F14C090397FE01FE09039FF8003F0489038000FF8484814FC0007
141F485A121F5B123FED0FF8007FEC07F049EB01C092C7FC12FFAB127FA27FA2003F151E
7F001F153E000F153C6D147C6C6C14F86C90388001F0C69038C003E090397FF00FC0011F
B51200010713FC9038007FE0272B7DA92E>99 D<EE07F8ED07FFA4ED003F161FB0EC7FE0
903803FFFC011F13FF90397FF00FDF9039FFC003FF000390C7FC4848147F000F153F4914
1F121F485AA2127F5BA312FFAA127FA37F123FA2121F6D143F000F157F6C6C14FF6C6C49
7F6CD98007EBFFE03A007FE01F9F90391FFFFE1F010713F89026007FC0EBE00033407DBE
3A>I<ECFFE0010713FC013F13FFD97FE013803A01FF803FC0489038001FE04848EB0FF0
484814F8ED07FC485A003FEC03FEA3485A16FFA200FF80A390B7FCA301F0C8FCA5127FA3
6C7E160F121F6D141F000F151E6C6C143E0003157C6C6C14F86C9038C003F090397FF01F
E0011FB512C00107EBFE009038007FF0282B7DA92F>I<903A03FF8003F0013F9038F81F
FC90B538FE7FFE0003903801FFFC3A07FC007FE1000F15E04848EB3FF0003FEDF87C4901
1F1300A2007F81A7003F5DA26D133F001F5D6C6C495A00075D9039FF01FF80DAFFFEC7FC
D80F3F13F801031380001ECAFCA2121FA37F7F90B6FC6C15F016FC6C15FF17806C16C017
E0120F271FC0000113F04848EB001F48C8EA0FF8160712FE1603A46C15076C16F06D140F
6C6CEC1FE06C6CEC3FC0D80FF8ECFF803B03FF800FFE00C690B512F8011F14C0010101FC
C7FC2F3D7DA834>103 D<13FFB5FCA412077EB0ED3FF0EDFFFE02036D7EDA0FC07F9139
1E007FE04A6D7E5C5C4A6D7E5CA25CA391C7FCB3A5B5D8FC07B512E0A4333F7CBE3A>I<
EA01F8487E487E487E481380A66C13006C5A6C5A6C5AC8FCA913FFB5FCA412077EB3ADB5
12F8A415407CBF1D>I<13FFB5FCA412077EB1923803FFFEA4030013804CC7FC4B5AED03
F04B5AED1FC04B5A037EC8FC5DEC03F8EC07E04A7E4A7EEC7FFC14FF818102E77F02837F
1401496C7F826F7E6F7E151F6F7E826F7F6F7F816F7F83B5D8F807EBFFC0A4323F7DBE37
>107 D<13FFB5FCA412077EB3B3B1B512FCA4163F7CBE1D>I<D801FED93FF049B47E00FF
DAFFFE010713F002039026FF801F13FCDA0FC09039C07E07FE913C1E007FE0F003FF0007
4990273FF1E0011380000349ECF3C04AECF7806D486DB4C713C04A5CA24A5CA391C75BB3
A5B5D8FC07B5D8E03F13FFA450297CA857>I<D801FEEB3FF000FFECFFFE02036D7EDA0F
C07F91391E007FE00007496D7E00035B5C6D486D7E5CA25CA391C7FCB3A5B5D8FC07B512
E0A433297CA83A>I<EC7FF0903803FFFE011FEBFFC090397FE03FF09039FF800FF84849
6C7E48486D7E48486D7E48486D1380001F16C0A2003F16E049147F007F16F0A400FF16F8
AA007F16F0A46C6CECFFE0A2001F16C0000F16806D5B6C6C4913006C6C495A6C6D485A3A
007FE03FF0011FB512C0010791C7FC9038007FF02D2B7DA934>I<01FFEB7FE0B53807FF
FC021F13FFDA7F0113C09139F8007FF00007496D7E6C496D7E02806D7E8391C77E188082
18C0A38218E0AA18C05EA34C1380A218006E495A6E131F6E5C6E495A6EEBFFE0DA7F035B
021FB5C7FC020713F8020013C092C9FCADB512FCA4333B7DA83A>I<3901FE01FC00FF90
3807FF804A13E091383F1FF0143C00079038783FF8000313F014E013FF14C0ED1FF09138
800FE0ED038092C7FCA291C8FCB3A4B6FCA425297DA82B>114 D<90381FF80E48B5123E
000714FE380FE007381F800148C7FC007E147E007C143E12FC151EA27E7E6D90C7FC13E0
13FF6C13FCECFF806C14E06C14F86C80000380C680133F01031480EB000F020113C000F0
EB007F153F6C141FA2150F7EA26C1580151F6C15006D5B01E0137E9038F803FC00FCB512
F0D8F03F13C026E007FEC7FC222B7DA929>I<EB0780A5130FA4131FA3133F137FA213FF
5A1207001FEBFFFCB6FCA30001EB8000B3A2151EA96C143C14C0A290387FE07890383FF0
F090381FFFE0010713C0010013001F3B7EB928>I<01FFEC07F8B5EB07FFA40007EC003F
6C151FB3A6163FA3167F6C15FFA26E487F6C913907DFFFE090397FE01F9F90391FFFFE1F
010713F8010001E0EBE000332A7CA83A>I<B5D8F801B5FCA400019039C0003FC06C93C7
FC6D6C137E6E137C6D6C5B6D6C485A6D6C485A6D6C485A6D495A6D139F03FFC8FC6D5B6E
5A6E5A141F6E7E81814A7F4A7F147E91387C7FE002F87F49486C7E49486C7E49486C7E90
380F8007011F6D7ED93F0080017E6D7F017C6D7FD801FC6E7EB5D88003B512C0A432287E
A737>120 D<B500F890381FFFC0A400030180903803F8006CED01E06E13036C5E80017F
4A5A80160F013F92C7FC6E5B011F141E6E133E010F143C6E137C010714786E13F86D5C15
816D5C15C16DEBC3C015E315E7027F5B15FF6E90C8FCA26E5AA26E5AA26E5AA26E5AA26E
5AA214035D14075D000C130F003F91C9FC486C5A38FFC01E143E143C5C14F8387F81F049
5A383E0FC06CB45A6C48CAFCEA03F8323B7EA737>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff ecbx1200 12 12
/Ff 12 118 df<EA07C0EA1FF0EA3FF8EA7FFCEAFFFEA7EA7FFCEA3FF8EA1FF0EA07C00F
0F788E1F>46 D<EC3FF849B5FC010F14E0013F14F890397FF01FFC9039FFC007FE489038
0001FF48486D1380000716C049147F000F16E049143F001F16F0A2003F16F8A249141F00
7F16FCA600FF16FEB3A3007F16FCA56C6CEC3FF8A3001F16F0A2000F16E06D147F000716
C06D14FF6C6C4913806C6D4813006C6D485A90397FF01FFC6DB55A010F14E00103148090
26003FF8C7FC2F427CC038>48 D<EC03C01407141F147FEB03FF133FB6FCA413C3EA0003
B3B3ADB712FCA5264177C038>I<ECFFE0010F13FE013F6D7E90B612E0000315F82607FC
0313FE3A0FE0007FFFD81F806D138048C7000F13C0488001C015E001F07F00FF6E13F07F
17F881A46C5A6C5A6C5AC9FC17F05DA217E05D17C04B13804B1300A2ED1FFC4B5A5E4B5A
4B5A4A90C7FC4A5A4A5AEC0FF04A5AEC3F804AC7127814FE495A494814F8D907E014F049
5A495A49C8FC017C140149140348B7FC4816E05A5A5A5A5AB8FC17C0A42D417BC038>I<
ECFFF0010713FF011F14C0017F14F049C66C7ED803F8EB3FFED807E06D7E81D80FF86D13
8013FE001F16C07FA66C5A6C4815806C485BC814005D5E4B5A4B5A4B5A4A5B020F138090
2607FFFEC7FC15F815FF16C090C713F0ED3FFCED0FFEEEFF80816F13C017E0A26F13F0A2
17F8A3EA0FC0EA3FF0487EA2487EA217F0A25D17E06C5A494913C05BD83F80491380D81F
F0491300D80FFEEBFFFE6CB612F800015D6C6C14C0011F49C7FC010113E02D427BC038>
I<163FA25E5E5D5DA25D5D5D5DA25D92B5FCEC01F7EC03E7140715C7EC0F87EC1F07143E
147E147C14F8EB01F0EB03E0130714C0EB0F80EB1F00133E5BA25B485A485A485A120F5B
48C7FC123E5A12FCB91280A5C8000F90C7FCAC027FB61280A531417DC038>I<00071503
01E0143F01FFEB07FF91B6FC5E5E5E5E5E16804BC7FC5D15E092C8FC01C0C9FCAAEC3FF0
01C1B5FC01C714C001DF14F09039FFE03FFC9138000FFE01FC6D7E01F06D13804915C049
7F6C4815E0C8FC6F13F0A317F8A4EA0F80EA3FE0487E12FF7FA317F05B5D6C4815E05B00
7EC74813C0123E003F4A1380D81FC0491300D80FF0495AD807FEEBFFFC6CB612F0C65D01
3F1480010F01FCC7FC010113C02D427BC038>I<DCFFF01470031F01FF14F04AB6EAE001
0207EDF803023FEDFE0791B539E001FF0F4949C7EA3F9F010701F0EC0FFF4901C0804990
C87E4948814948814948167F4849163F4849161F5A4A160F485B19074890CAFC19035A5B
A2007F1801A34994C8FC12FFAD057FB612F0127F7FA3003FDC0001EBF000A27F7EA26C7F
A26C7F807E6C7F6C7F6D7E6D6C5D6D6C7E6D6D5C6D01F05C010101FE143F6D903AFFF001
FF9F023F90B6120F0207EDFC030201EDF000DA001F02C01330030001FCC9FC4C467AC458
>71 D<EC1FFC49B512C0010714F0011F14FC90397FF80FFF9026FFC0017F48496C7F4848
C7EA3FE000078248486E7E49140F001F82A2003F82491407007F82A400FF1780AA007F17
00A46C6C4A5AA2001F5E6D141F000F5E6C6C4A5AA26C6C6CEBFFE06C6D485B27007FF80F
90C7FC6DB55A010F14F8010114C09026001FFCC8FC312F7DAD38>111
D<90397FC00FF8B590B57E02C314E002CF14F89139DFC03FFC9139FF001FFE000301FCEB
07FF6C496D13804A15C04A6D13E05C7013F0A2EF7FF8A4EF3FFCACEF7FF8A318F017FFA2
4C13E06E15C06E5B6E4913806E4913006E495A9139DFC07FFC02CFB512F002C314C002C0
91C7FCED1FF092C9FCADB67EA536407DAC3E>I<90387F807FB53881FFE0028313F0028F
13F8ED8FFC91389F1FFE000313BE6C13BC14F8A214F0ED0FFC9138E007F8ED01E092C7FC
A35CB3A5B612E0A5272D7DAC2E>114 D<D97FC049B4FCB50103B5FCA50003EC000F6C81
B3A85EA25EA25E7E6E491380017FD901F713FE9138F807E76DB512C7010F1407010313FE
9026007FF0EBFC00372E7CAC3E>117 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg ecbx1440 14.4 8
/Fg 8 122 df<151E153E15FE1403140F147FEB07FF0003B5FCB6FCA3EBF87FEAFC00C7
FCB3B3B3A6007FB712FCA52E4E76CD42>49 D<DA0FFE141C91B500F0133C010702FC137C
011F02FF13FC017F15C19026FFF00113E148903980001FFB4890C7EA07FFD807FC140148
48804848153F171F4848150FA2007F1607491503A2170112FFA217007FA26D167CA27F7F
6D93C7FC6C7E14C014F8ECFF806C14F8EDFFC06C15FC6CEDFF8017F06C16FC6C826C707E
6C836D82011F8201078213016D6C81020781EC007F030380ED003F040314801600173F83
7113C0838312F883A3837EA319807EA26C5E19007F6D4B5A7F6D4B5A01FC4B5A6D151FD9
FFC04A5AD97FF8ECFFE028FE1FFF80075B010790B6C7FCD8FC0115FC486C6C14F048010F
14C0489026007FFCC8FC3A5479D249>83 D<003FBB12FCA59126C0007FEB000301FCC7ED
003FD87FF0F00FFE49180749180349180190C81600A2007E1A7EA3007C1A3EA500FC1A3F
481A1FA6C91700B3B3AC49B912C0A550517BD05B>I<913807FF80027F13F849B512FE01
076E7E011F010313E0903A3FFC007FF0D97FF06D7E49486D7E4849130F48496D7E488248
90C77E1880485A82003F17C0A3485A18E082A212FFA290B8FCA401FCCAFCA6127FA37F12
3FA2EF03E06C7E17076C17C06C6D140F18806C6D141F6C6DEC3F006C6D147ED97FFC495A
D91FFFEB07F86D9038E03FF0010390B512C001005D023F01FCC7FC020113E033387CB63C
>101 D<D93FF0D91FF84AB47EB591B56C010F13F8030302E0013F13FE030F6E90B6FCDB
3F809027F803F80F7F922A7E007FFC07E0077F000302F890283FFE0F80037FC6D9F1F001
1F49487EDAF3E0DAFF3E814B153CDAF7805D92C76C496D7F14FF4A5EA24A5EA34A5EB3AD
B6D8F80FB66CB612F8A565367BB56E>109 D<903903FFC00E011FEBFC1E90B6127E0003
15FE3907FE003FD80FF0130F4848130348481301491300127F90C8127EA248153EA27FA2
7F01F091C7FC13FCEBFF806C13FEECFFF06C14FE6F7E6C15E06C816C15FC6C81C681133F
010F15801301D9000F14C0EC003F030713E0150100F880167F6C153FA2161F7EA217C07E
6D143F17807F6DEC7F0001F85C6DEB03FE9039FF801FFC486CB512F0D8F81F14C0D8F007
91C7FC39E0007FF02B387CB634>115 D<147CA614FCA41301A31303A21307A2130F131F
133F137F13FF1203000F90B512FEB7FCA426007FFCC8FCB3A9EE0F80ABEE1F006D7EA201
1F143E806D6D5A6DEBC1F86DEBFFF001005C023F1380DA03FEC7FC294D7ECB33>I<B600
E090381FFFFCA5000101F8C7000113006CEE007C6E15FC017F5E6E1401013F5E8017036D
6D5C17076D5E6F130F6D5E6F131F6D93C7FC815F6D6D133E177E6D157C6F13FC027F5C81
1601DA3FFF5B16036E5C16876E5C16CF6E5C16EF16FF6E91C8FCA26E5BA26E5BA26F5AA3
6F5AA26F5AA26F5AA35E151F93C9FC5D153E157ED81FC0137C487E486C13FC486C5B1401
5D4A5A14074A5A6C48485A4948CAFC495A383F81FC6CB45A6C5B000313C0C648CBFC3E4D
7DB445>121 D E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize

%%EndSetup
%%Page: 1 1
1 0 bop 382 548 a Fg(1)131 b(System)44 b(T)-11 b(estSystem)382
754 y Ff(1.1)112 b(Group)38 b(Group0)382 926 y Fe(Geometry)382
1097 y Fd(The)48 b(geometry)h(of)e(group)i(Group0)f(is)f(a)h
Fe(rectangle)h Fd(with)f Fc(heig)s(ht)56 b Fb(=)e(10)p
Fd(,)f(and)382 1210 y Fc(w)r(idth)27 b Fb(=)d(12)p Fd(.)382
1450 y Fe(Cell)35 b(T)m(yp)s(e)382 1622 y Fd(The)c(cell)f(t)m(yp)s(e)h
(of)f(the)h(group)g(is)f Fe("T)-9 b(anH")p Fd(.)382 1862
y Fe(Connections)34 b(to)h(other)g(groups)493 2034 y
Fd(1.)46 b(to)31 b(group)g(Group1)g(\(see)f(1.2\))493
2147 y(2.)46 b(to)31 b(group)g(Group4)g(\(see)f(1.5\))382
2390 y Ff(1.2)112 b(Group)38 b(Group1)382 2562 y Fe(Geometry)382
2733 y Fd(The)46 b(geometry)h(of)f(group)h(Group1)f(is)g
Fe(sparse)p Fd(,)k(and)c(de\034ned)i(b)m(y)e(the)g(follo)m(wing)382
2846 y(p)s(oin)m(ts:)518 2959 y Fa(\017)g Fd(p)s(oin)m(t:)41
b(\(1,)31 b(1\))518 3072 y Fa(\017)46 b Fd(p)s(oin)m(t:)41
b(\(2,)31 b(2\))518 3185 y Fa(\017)46 b Fd(p)s(oin)m(t:)41
b(\(3,)31 b(3\))382 3425 y Fe(Cell)k(T)m(yp)s(e)382 3597
y Fd(The)c(cell)f(t)m(yp)s(e)h(of)f(the)h(group)g(is)f
Fe("In)m(tegrate)35 b(and)g(Fire")p Fd(.)382 3837 y Fe(Connections)f
(to)h(other)g(groups)493 4008 y Fd(1.)46 b(to)31 b(group)g(Group1)g
(\(see)f(1.2\))493 4121 y(2.)46 b(to)31 b(group)g(Group4)g(\(see)f
(1.5\))382 4365 y Ff(1.3)112 b(Group)38 b(Group2)382
4536 y Fe(Geometry)382 4708 y Fd(The)25 b(geometry)h(of)e(group)h
(Group2)h(is)e Fe(hexagonal)p Fd(,)i(with)f(the)g(follo)m(wing)h
(parameters)518 4821 y Fa(\017)46 b Fd(heigh)m(t:)c(20)518
4934 y Fa(\017)k Fd(width:)41 b(30)518 5047 y Fa(\017)46
b Fd(o\033set:)40 b(o)s(dd)518 5159 y Fa(\017)46 b Fd(orien)m(tation:)d
(horizon)m(tal)1854 5652 y(1)p eop
%%Page: 2 2
2 1 bop 382 548 a Fe(Cell)35 b(T)m(yp)s(e)382 720 y Fd(The)c(cell)f(t)m
(yp)s(e)h(of)f(the)h(group)g(is)f Fe("Linear)35 b(Threshold")p
Fd(.)382 960 y Fe(Connections)f(to)h(other)g(groups)493
1131 y Fd(1.)46 b(to)31 b(group)g(Group1)g(\(see)f(1.2\))493
1244 y(2.)46 b(to)31 b(group)g(Group4)g(\(see)f(1.5\))382
1488 y Ff(1.4)112 b(Group)38 b(Group3)382 1659 y Fe(Geometry)382
1831 y Fd(The)48 b(geometry)h(of)e(group)i(Group3)f(is)f(a)h
Fe(rectangle)h Fd(with)f Fc(heig)s(ht)56 b Fb(=)e(15)p
Fd(,)f(and)382 1944 y Fc(w)r(idth)27 b Fb(=)d(15)p Fd(.)382
2184 y Fe(Cell)35 b(T)m(yp)s(e)382 2355 y Fd(The)c(cell)f(t)m(yp)s(e)h
(of)f(the)h(group)g(is)f Fe("Random)j(Spik)m(e")p Fd(.)382
2595 y Fe(Connections)h(to)h(other)g(groups)493 2767
y Fd(1.)46 b(to)31 b(group)g(Group1)g(\(see)f(1.2\))493
2880 y(2.)46 b(to)31 b(group)g(Group4)g(\(see)f(1.5\))382
3123 y Ff(1.5)112 b(Group)38 b(Group4)382 3295 y Fe(Geometry)382
3467 y Fd(The)25 b(geometry)h(of)e(group)h(Group4)h(is)e
Fe(hexagonal)p Fd(,)i(with)f(the)g(follo)m(wing)h(parameters)518
3580 y Fa(\017)46 b Fd(heigh)m(t:)c(6)518 3692 y Fa(\017)k
Fd(width:)41 b(5)518 3805 y Fa(\017)46 b Fd(o\033set:)40
b(o)s(dd)518 3918 y Fa(\017)46 b Fd(orien)m(tation:)d(v)m(ertical)382
4158 y Fe(Cell)35 b(T)m(yp)s(e)382 4330 y Fd(The)c(cell)f(t)m(yp)s(e)h
(of)f(the)h(group)g(is)f Fe("User)k(De\034ned")p Fd(.)382
4570 y Fe(Connections)g(to)h(other)g(groups)493 4742
y Fd(1.)46 b(to)31 b(group)g(Group1)g(\(see)f(1.2\))493
4855 y(2.)46 b(to)31 b(group)g(Group4)g(\(see)f(1.5\))1854
5652 y(2)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
