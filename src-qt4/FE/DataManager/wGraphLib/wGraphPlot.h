#ifndef WGRAPHPLOT_HPP
#define WGRAPHPLOT_HPP

#include <QList>
#include <QVector>

#include "wGraphWidget.h"
#include "wGraphTrace.h"

/*! The WGraphPlot inherits WGraphWidget and adds some specific
  functionalities for handling serial data for visualization. 
  
  In addition, a WGraphLegend is generated on request, which provides a
  mean of selecting different data sets at the GUI level.*/
class WGraphPlot : public WGraphWidget {
  Q_OBJECT
public:
  WGraphPlot(QWidget *parent, QWidget *legendParent=0,
	      WGraphXAxis::Position =WGraphXAxis::bottom,
	      WGraphYAxis::Position =WGraphYAxis::left,
	      int=0);
  ~WGraphPlot();
  
  virtual void writeXML(QDomElement &);
  virtual void readXML(QDomElement &);

  /*! Adds a new trace with name \em name and color \em color. The
    trace is initialized to the length specified by setTraceLength().
    The traces are numbered incrementally, starting at 0.

    If a WGraphLegend was generated by passing a non-zero
    legendParent to WGraphPlot(), the trace's name is also inserted
    into the legend.*/
  WGraphTrace *addTrace(const QString& name, QPen pen);
  /*! Removes all traces, frees the memory occupied, and also removes
    them from the legend*/
  void removeTraces();
  
  /*! Sets the length of all the currently added traces to \em
    length. All traces added in future will also be set to this
    length.

    NOTE: therefore, all the traces shown in one WGraphPlot have the
    same size.

    \sa getTraceLength()*/
  virtual void setTraceLength(unsigned int length);
  
  /*! Returns the current number of traces added to this WGraphPlot
    by addTrace().*/
  int countTraces() const { return traces.count(); };
  /*! Returns the length of the traces in this WGraphPlot. \sa
    setTraceLength()*/
  int traceLength() const { return xData.count(); };
  
  /*! Returns a comma seperated list of the currently visible
    traces. If there is more then one visible trace and the resulting
    string is longer then maxChars, "..." is returned. */
  QString getVisibleTracesStr(int maxChars) const;
  
  /*! Returns a pointer to the trace object with number \em trace, if
    this is a valid number, 0 otherwise.*/
//ZZZ FIX OR KILL  WGraphTrace *getTrace(int trace) { return traces.at(trace); }

  /*! Returns a reference to the data of trace \em trace.*/
  QVector<float> &traceData(int trace) { 
    return traces[trace]->getData(); 
  };
  
  /*! Returns a reference to the horizontal positions of the data
    points. If not assigned differently, these will be set to 0
    ... (N-1) by default, where N is the length of the traces.*/
  QVector<float> &getXData() { return xData; }

  /*! Returns a pointer to the WGraphLegend associated to this
    WGraphPlot. Returns a 0 pointer, if no legend was generated.*/
  WGraphLegend *getLegend() { return legend; }
  
  /*! Sets the X data range, and initializes the horizontal position
    of the lines to cover this range uniformely.*/
  void setXDataRange(WRange r);
  
  float dataPointsPerPixel();
  
public slots:

  /*! Determines the range over which the data of all visible traces
  extend, and sets the data range of the vertical axis
  accordingly. \sa WGraphWidget::setYDataRange(),
  WGraphTrace::checkRange()*/
  void checkRange();

  void clear();

protected:

  QVector<float>  xData;

  QList<WGraphTrace*> traces;

  WGraphLegend *legend;
  QWidget *legendParent;
};

#endif // WGRAPHPLOT_HPP
